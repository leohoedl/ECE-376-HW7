

HI-TECH Software PRO Macro Assembler (PIC18) V9.63PL3 build 4692 
                                                       Tue Mar 03 15:58:53 2020

HI-TECH Software Omniscient Code Generator build 4692
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 80
     4                           	opt	pm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	text1,global,reloc=2,class=CODE,delta=1
     7                           	psect	text2,global,reloc=2,class=CODE,delta=1
     8                           	psect	text3,global,reloc=2,class=CODE,delta=1
     9                           	psect	text4,global,reloc=2,class=CODE,delta=1
    10                           	psect	text5,global,reloc=2,class=CODE,delta=1
    11                           	psect	text6,global,reloc=2,class=CODE,delta=1
    12                           	psect	text7,global,reloc=2,class=CODE,delta=1
    13                           	psect	text8,global,reloc=2,class=CODE,delta=1
    14                           	psect	text9,global,reloc=2,class=CODE,delta=1
    15                           	psect	text10,global,reloc=2,class=CODE,delta=1
    16                           	psect	text11,global,reloc=2,class=CODE,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONS
      +                          T,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=
      +                          1
    20                           	psect	pa_nodes,global,reloc=2,class=CODE,delta=
      +                          1
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98  000000                     
    99  000000                     
   100  000000                     
   101  000000                     
   102  000000                     
   103  000000                     
   104  000000                     
   105  000000                     
   106  000000                     
   107  000000                     
   108  000000                     
   109  000000                     
   110  000000                     
   111  000000                     
   112  000000                     
   113  000000                     
   114  000000                     
   115  000000                     
   116  000000                     
   117  000000                     
   118  000000                     
   119  000000                     
   120  000000                     
   121  000000                     
   122  000000                     
   123  000000                     
   124  000000                     
   125  000000                     
   126  000000                     
   127  000000                     
   128  000000                     
   129  000000                     
   130  000000                     
   131  000000                     
   132  000000                     
   133  000000                     
   134  000000                     
   135  000000                     
   136  000000                     
   137  000000                     
   138                           
   139                           	psect	text0
   140                           ;Data sizes: Strings 0, constant 42, data 0, bss
      +                           0, persistent 0 stack 37
   141  000000                     
   142                           ;Loaded_Die.c: 21: void main(void)
   143                           ;Loaded_Die.c: 22: {
   144  00102C                     _main:
   145                           	opt stack 31
   146                           ; BSR set to: ?
   147  00102C  6A92               	clrf	3986,c	;volatile
   148                           ;Loaded_Die.c: 28: TRISB = 0x0F;
   149  00102E  0E0F               	movlw	15
   150  001030  6E93               	movwf	3987,c	;volatile
   151                           ;Loaded_Die.c: 29: TRISC = 0x0F;
   152  001032  6E94               	movwf	3988,c	;volatile
   153                           ;Loaded_Die.c: 30: TRISD = 0;
   154  001034  6A95               	clrf	3989,c	;volatile
   155                           ;Loaded_Die.c: 31: TRISE = 0;
   156  001036  6A96               	clrf	3990,c	;volatile
   157                           ;Loaded_Die.c: 32: ADCON1 = 0x0F;
   158  001038  0E0F               	movlw	15
   159  00103A  6EC1               	movwf	4033,c
   160                           ;Loaded_Die.c: 34: LCD_Init();
   161  00103C  EC0E  F00A         	call	_LCD_Init	;wreg free
   162                           ;Loaded_Die.c: 36: LCD_Move(0,0); for (i=0; i<20
      +                          ; i++) LCD_Write(MSG0[i]);
   163  001040  0E00               	movlw	0
   164  001042  6A08               	clrf	?_LCD_Move,c
   165  001044  ECD6  F009         	call	_LCD_Move
   166  001048  6A04               	clrf	??_main+4,c
   167  00104A  6A05               	clrf	??_main+5,c
   168  00104C                     l167:
   169                           ; BSR set to: ?
   170  00104C  5004               	movf	??_main+4,w,c
   171  00104E  0F01               	addlw	low _MSG0
   172  001050  EC04  F00A         	call	PL2
   173  001054  EC54  F00A         	call	_LCD_Write
   174  001058  4A04               	infsnz	??_main+4,f,c
   175  00105A  2A05               	incf	??_main+5,f,c
   176  00105C  ECFF  F009         	call	PL3
   177  001060  E3F5               	bnc	l167
   178                           ; BSR set to: ?
   179                           ;Loaded_Die.c: 37: LCD_Move(1,0); for (i=0; i<20
      +                          ; i++) LCD_Write(MSG1[i]);
   180  001062  6A08               	clrf	?_LCD_Move,c
   181  001064  0E01               	movlw	1
   182  001066  ECD6  F009         	call	_LCD_Move
   183  00106A  6A04               	clrf	??_main+4,c
   184  00106C  6A05               	clrf	??_main+5,c
   185  00106E                     l170:
   186                           ; BSR set to: ?
   187  00106E  5004               	movf	??_main+4,w,c
   188  001070  0F16               	addlw	low _MSG1
   189  001072  EC04  F00A         	call	PL2
   190  001076  EC54  F00A         	call	_LCD_Write
   191  00107A  4A04               	infsnz	??_main+4,f,c
   192  00107C  2A05               	incf	??_main+5,f,c
   193  00107E  ECFF  F009         	call	PL3
   194  001082  E3F5               	bnc	l170
   195                           ; BSR set to: ?
   196                           ;Loaded_Die.c: 38: Wait_ms(500);
   197  001084  0EF4               	movlw	244
   198  001086  6E0A               	movwf	?_Wait_ms,c
   199  001088  0E01               	movlw	1
   200  00108A  6E0B               	movwf	?_Wait_ms+1,c
   201  00108C  EC40  F00A         	call	_Wait_ms	;wreg free
   202                           ;Loaded_Die.c: 41: TRISC = TRISC | 0xC0;
   203  001090  0EC0               	movlw	192
   204  001092  1294               	iorwf	3988,f,c	;volatile
   205                           ;Loaded_Die.c: 42: TXIE = 0;
   206  001094  989D               	bcf	3997,4,c
   207                           ;Loaded_Die.c: 43: RCIE = 0;
   208  001096  9A9D               	bcf	3997,5,c
   209                           ;Loaded_Die.c: 44: BRGH = 0;
   210  001098  94AC               	bcf	4012,2,c
   211                           ;Loaded_Die.c: 45: BRG16 = 1;
   212  00109A  86B8               	bsf	4024,3,c
   213                           ;Loaded_Die.c: 46: SYNC = 0;
   214  00109C  98AC               	bcf	4012,4,c
   215                           ;Loaded_Die.c: 47: SPBRG = 255;
   216  00109E  68AF               	setf	4015,c
   217                           ;Loaded_Die.c: 48: TXSTA = 0x22;
   218  0010A0  0E22               	movlw	34
   219  0010A2  6EAC               	movwf	4012,c	;volatile
   220                           ;Loaded_Die.c: 49: RCSTA = 0x90;
   221  0010A4  0E90               	movlw	144
   222  0010A6  6EAB               	movwf	4011,c	;volatile
   223                           ;Loaded_Die.c: 51: while(1) {
   224                           ; BSR set to: ?
   225                           ;Loaded_Die.c: 52: while(!RB0);
   226  0010A8                     l176:
   227                           ; BSR set to: ?
   228  0010A8  B081               	btfsc	3969,0,c	;volatile
   229  0010AA  D018               	goto	l179
   230  0010AC  D7FD               	goto	l176
   231                           ; BSR set to: ?
   232                           ;Loaded_Die.c: 53: while(RB0) {
   233  0010AE                     l180:
   234                           ; BSR set to: ?
   235                           ;Loaded_Die.c: 54: d8 = (d8 + 1) % 8;
   236  0010AE  2802               	incf	??_main+2,w,c
   237  0010B0  6E06               	movwf	(??_main+6)& (0+255),c
   238  0010B2  0E00               	movlw	0
   239  0010B4  2003               	addwfc	??_main+3,w,c
   240  0010B6  6E07               	movwf	(??_main+7)& (0+255),c
   241  0010B8  0E07               	movlw	7
   242  0010BA  1406               	andwf	??_main+6,w,c
   243  0010BC  6E02               	movwf	??_main+2,c
   244  0010BE  6A03               	clrf	??_main+3,c
   245                           ;Loaded_Die.c: 55: d101 = (d101 + 1) % 111;
   246  0010C0  0E6F               	movlw	111
   247  0010C2  6E0A               	movwf	?___awmod+2,c
   248  0010C4  6A0B               	clrf	?___awmod+3,c
   249  0010C6  2800               	incf	??_main,w,c
   250  0010C8  6E08               	movwf	?___awmod,c
   251  0010CA  0E00               	movlw	0
   252  0010CC  2001               	addwfc	??_main+1,w,c
   253  0010CE  6E09               	movwf	?___awmod+1,c
   254  0010D0  ECA6  F009         	call	___awmod	;wreg free
   255  0010D4  C008  F000         	movff	?___awmod,??_main
   256  0010D8  C009  F001         	movff	?___awmod+1,??_main+1
   257  0010DC                     l179:
   258                           ; BSR set to: ?
   259  0010DC  B081               	btfsc	3969,0,c	;volatile
   260  0010DE  D7E7               	goto	l180
   261                           ; BSR set to: ?
   262                           ;Loaded_Die.c: 56: }
   263                           ;Loaded_Die.c: 57: d8 = d8 + 1;
   264  0010E0  4A02               	infsnz	??_main+2,f,c
   265  0010E2  2A03               	incf	??_main+3,f,c
   266                           ;Loaded_Die.c: 60: if(d101 < 20) d8 = 8;
   267  0010E4  5001               	movf	??_main+1,w,c
   268  0010E6  0A80               	xorlw	128
   269  0010E8  0F80               	addlw	-128
   270  0010EA  0E14               	movlw	20
   271  0010EC  B4D8               	btfsc	status,2,c
   272  0010EE  5C00               	subwf	??_main,w,c
   273  0010F0  0E08               	movlw	8
   274  0010F2  E202               	bc	L1
   275  0010F4  6E02               	movwf	??_main+2,c
   276  0010F6  6A03               	clrf	??_main+3,c
   277                           ; BSR set to: ?
   278                           ;Loaded_Die.c: 62: LCD_Move(1,8); LCD_Out(d8, 0,
      +                          0);
   279  0010F8                     L1:
   280  0010F8  6E08               	movwf	?_LCD_Move,c
   281  0010FA  0E01               	movlw	1
   282  0010FC  ECD6  F009         	call	_LCD_Move
   283  001100  0E00               	movlw	0
   284  001102  6A0D               	clrf	?_LCD_Out+5,c
   285  001104  6A0C               	clrf	?_LCD_Out+4,c
   286  001106  C002  F008         	movff	??_main+2,?_LCD_Out
   287  00110A  C003  F009         	movff	??_main+3,?_LCD_Out+1
   288  00110E  BE09               	btfsc	?_LCD_Out+1,7,c
   289  001110  0EFF               	movlw	-1
   290  001112  6E0A               	movwf	?_LCD_Out+2,c
   291  001114  6E0B               	movwf	?_LCD_Out+3,c
   292  001116  EC9B  F008         	call	_LCD_Out	;wreg free
   293                           ;Loaded_Die.c: 63: while(!TRMT); TXREG = d8 + 48
      +                          ;
   294  00111A                     l183:
   295                           ; BSR set to: ?
   296  00111A  A2AC               	btfss	4012,1,c	;volatile
   297  00111C  D7FE               	goto	l183
   298                           ; BSR set to: ?
   299  00111E  5002               	movf	??_main+2,w,c
   300  001120  0F30               	addlw	48
   301  001122  6EAD               	movwf	4013,c	;volatile
   302                           ;Loaded_Die.c: 64: while(!TRMT); TXREG = 13;
   303  001124                     l186:
   304                           ; BSR set to: ?
   305  001124  A2AC               	btfss	4012,1,c	;volatile
   306  001126  D7FE               	goto	l186
   307                           ; BSR set to: ?
   308  001128  0E0D               	movlw	13
   309  00112A  6EAD               	movwf	4013,c	;volatile
   310                           ;Loaded_Die.c: 65: while(!TRMT); TXREG = 10;
   311  00112C                     l189:
   312                           ; BSR set to: ?
   313  00112C  A2AC               	btfss	4012,1,c	;volatile
   314  00112E  D7FE               	goto	l189
   315                           ; BSR set to: ?
   316  001130  0E0A               	movlw	10
   317  001132  6EAD               	movwf	4013,c	;volatile
   318                           ; BSR set to: ?
   319  001134  D7B9               	goto	l176
   320  001136                     __end_of_main:
   321                           	opt stack 0
   322                           
   323                           	psect	text1
   324                           ; =============== function _main ends ==========
      +                          ==
   325  000000                     
   326                           ;lcd_portd.c: 53: void LCD_Move(unsigned char Ro
      +                          w, unsigned char Col)
   327                           ;lcd_portd.c: 54: {
   328  0013AC                     _LCD_Move:
   329                           	opt stack 30
   330                           ; BSR set to: ?
   331                           ; LCD_Move@Row loaded to fsr2l
   332  0013AC  CFE8 FFD9          	movff	wreg,fsr2l
   333                           ;lcd_portd.c: 55: if (Row == 0) LCD_Inst(0x80 + 
      +                          Col);
   334  0013B0  66D9               	tstfsz	fsr2l,c
   335  0013B2  D004               	goto	l124
   336  0013B4  5008               	movf	?_LCD_Move,w,c
   337  0013B6  0F80               	addlw	128
   338  0013B8  EC28  F00A         	call	_LCD_Inst
   339  0013BC                     l124:
   340                           ; BSR set to: ?
   341                           ;lcd_portd.c: 56: if (Row == 1) LCD_Inst(0xC0 + 
      +                          Col);
   342  0013BC  04D9               	decf	fsr2l,w,c
   343  0013BE  E104               	bnz	l125
   344  0013C0  5008               	movf	?_LCD_Move,w,c
   345  0013C2  0FC0               	addlw	192
   346  0013C4  EC28  F00A         	call	_LCD_Inst
   347  0013C8                     l125:
   348                           ; BSR set to: ?
   349                           ;lcd_portd.c: 57: if (Row == 2) LCD_Inst(0x94 + 
      +                          Col);
   350  0013C8  50D9               	movf	fsr2l,w,c
   351  0013CA  0A02               	xorlw	2
   352  0013CC  E104               	bnz	l126
   353  0013CE  5008               	movf	?_LCD_Move,w,c
   354  0013D0  0F94               	addlw	148
   355  0013D2  EC28  F00A         	call	_LCD_Inst
   356  0013D6                     l126:
   357                           ; BSR set to: ?
   358                           ;lcd_portd.c: 58: if (Row == 3) LCD_Inst(0xD4 + 
      +                          Col);
   359  0013D6  50D9               	movf	fsr2l,w,c
   360  0013D8  0A03               	xorlw	3
   361  0013DA  A4D8               	btfss	status,2,c
   362  0013DC  0012               	return	
   363  0013DE  5008               	movf	?_LCD_Move,w,c
   364  0013E0  0FD4               	addlw	212
   365  0013E2  EF28  F00A         	goto	_LCD_Inst
   366                           ; BSR set to: ?
   367                           ;lcd_portd.c: 59: }
   368                           ; BSR set to: ?
   369  0013E6                     __end_of_LCD_Move:
   370                           	opt stack 0
   371                           
   372                           	psect	text2
   373                           ; =============== function _LCD_Move ends ======
      +                          ======
   374  000000                     
   375                           ;lcd_portd.c: 86: void LCD_Out(long int DATA, un
      +                          signed char D, unsigned char N)
   376                           ;lcd_portd.c: 87: {
   377  001136                     _LCD_Out:
   378                           	opt stack 30
   379                           ; BSR set to: ?
   380                           ;lcd_portd.c: 88: unsigned char A[10], i;
   381                           ;lcd_portd.c: 90: if(DATA < 0) {
   382  001136  AE0B               	btfss	?_LCD_Out+3,7,c
   383  001138  D00C               	goto	l131
   384                           ;lcd_portd.c: 91: LCD_Write('-');
   385  00113A  0E2D               	movlw	45
   386  00113C  EC54  F00A         	call	_LCD_Write
   387                           ;lcd_portd.c: 92: DATA = -DATA;
   388  001140  1E0B               	comf	?_LCD_Out+3,f,c
   389  001142  1E0A               	comf	?_LCD_Out+2,f,c
   390  001144  1E09               	comf	?_LCD_Out+1,f,c
   391  001146  6C08               	negf	?_LCD_Out,c
   392  001148  0E00               	movlw	0
   393  00114A  2209               	addwfc	?_LCD_Out+1,f,c
   394  00114C  220A               	addwfc	?_LCD_Out+2,f,c
   395  00114E  220B               	addwfc	?_LCD_Out+3,f,c
   396                           ;lcd_portd.c: 93: }
   397  001150  D003               	goto	l132
   398  001152                     l131:
   399                           ; BSR set to: ?
   400                           ;lcd_portd.c: 94: else LCD_Write(' ');
   401  001152  0E20               	movlw	32
   402  001154  EC54  F00A         	call	_LCD_Write
   403  001158                     l132:
   404                           ; BSR set to: ?
   405                           ; LCD_Out@i allocated to fsr2l
   406                           ;lcd_portd.c: 95: for (i=0; i<10; i++) {
   407  001158  6AD9               	clrf	fsr2l,c
   408  00115A                     l133:
   409                           ; BSR set to: ?
   410                           ;lcd_portd.c: 96: A[i] = DATA % 10;
   411  00115A  0E0A               	movlw	10
   412  00115C  6E1D               	movwf	?___almod+4,c
   413  00115E  0E00               	movlw	0
   414  001160  6A1E               	clrf	?___almod+5,c
   415  001162  6A1F               	clrf	?___almod+6,c
   416  001164  6A20               	clrf	?___almod+7,c
   417  001166  C008  F019         	movff	?_LCD_Out,?___almod
   418  00116A  C009  F01A         	movff	?_LCD_Out+1,?___almod+1
   419  00116E  C00A  F01B         	movff	?_LCD_Out+2,?___almod+2
   420  001172  C00B  F01C         	movff	?_LCD_Out+3,?___almod+3
   421  001176  EC5C  F009         	call	___almod	;wreg free
   422  00117A  0E0E               	movlw	low ??_LCD_Out
   423  00117C  24D9               	addwf	fsr2l,w,c
   424  00117E  6EE9               	movwf	fsr0l,c
   425  001180  6AEA               	clrf	fsr0h,c
   426  001182  0E00               	movlw	high ??_LCD_Out
   427  001184  22EA               	addwfc	fsr0h,f,c
   428  001186  C019  FFEF         	movff	?___almod,indf0
   429                           ;lcd_portd.c: 97: DATA = DATA / 10;
   430  00118A  0E0A               	movlw	10
   431  00118C  6E1D               	movwf	?___aldiv+4,c
   432  00118E  0E00               	movlw	0
   433  001190  6A1E               	clrf	?___aldiv+5,c
   434  001192  6A1F               	clrf	?___aldiv+6,c
   435  001194  6A20               	clrf	?___aldiv+7,c
   436  001196  C008  F019         	movff	?_LCD_Out,?___aldiv
   437  00119A  C009  F01A         	movff	?_LCD_Out+1,?___aldiv+1
   438  00119E  C00A  F01B         	movff	?_LCD_Out+2,?___aldiv+2
   439  0011A2  C00B  F01C         	movff	?_LCD_Out+3,?___aldiv+3
   440  0011A6  ECFE  F008         	call	___aldiv	;wreg free
   441  0011AA  C019  F008         	movff	?___aldiv,?_LCD_Out
   442  0011AE  C01A  F009         	movff	?___aldiv+1,?_LCD_Out+1
   443  0011B2  C01B  F00A         	movff	?___aldiv+2,?_LCD_Out+2
   444  0011B6  C01C  F00B         	movff	?___aldiv+3,?_LCD_Out+3
   445  0011BA  2AD9               	incf	fsr2l,f,c
   446  0011BC  0E09               	movlw	9
   447  0011BE  64D9               	cpfsgt	fsr2l,c
   448  0011C0  D7CC               	goto	l133
   449                           ; BSR set to: ?
   450                           ; LCD_Out@i allocated to prodh
   451                           ;lcd_portd.c: 98: }
   452                           ;lcd_portd.c: 99: for (i=D; i>0; i--) {
   453  0011C2  C00C  FFF4         	movff	?_LCD_Out+4,prodh
   454  0011C6  66F4               	tstfsz	prodh,c
   455  0011C8  D001               	goto	l136
   456  0011CA  0C09               	retlw	9
   457  0011CC                     l136:
   458                           ; BSR set to: ?
   459                           ;lcd_portd.c: 100: if (i == N) LCD_Write('.');
   460  0011CC  500D               	movf	?_LCD_Out+5,w,c
   461  0011CE  62F4               	cpfseq	prodh,c
   462  0011D0  D003               	goto	l139
   463  0011D2  0E2E               	movlw	46
   464  0011D4  EC54  F00A         	call	_LCD_Write
   465  0011D8                     l139:
   466                           ; BSR set to: ?
   467                           ;lcd_portd.c: 101: LCD_Write(A[i-1] + '0');
   468  0011D8  CFF4 F018          	movff	prodh,??_LCD_Out+10
   469  0011DC  0EFF               	movlw	-1
   470  0011DE  2618               	addwf	??_LCD_Out+10,f,c
   471  0011E0  0E0E               	movlw	low ??_LCD_Out
   472  0011E2  2418               	addwf	??_LCD_Out+10,w,c
   473  0011E4  6EE9               	movwf	fsr0l,c
   474  0011E6  6AEA               	clrf	fsr0h,c
   475  0011E8  0E00               	movlw	high ??_LCD_Out
   476  0011EA  22EA               	addwfc	fsr0h,f,c
   477  0011EC  50EF               	movf	indf0,w,c
   478  0011EE  0F30               	addlw	48
   479  0011F0  EC54  F00A         	call	_LCD_Write
   480  0011F4  06F4               	decf	prodh,f,c
   481  0011F6  66F4               	tstfsz	prodh,c
   482  0011F8  D7E9               	goto	l136
   483  0011FA  0012               	return	
   484                           ; BSR set to: ?
   485                           ;lcd_portd.c: 102: }
   486                           ;lcd_portd.c: 103: }
   487                           ; BSR set to: ?
   488  0011FC                     __end_of_LCD_Out:
   489                           	opt stack 0
   490                           
   491                           	psect	text3
   492                           ; =============== function _LCD_Out ends =======
      +                          =====
   493  000000                     
   494                           ;lcd_portd.c: 72: void LCD_Init(void)
   495                           ;lcd_portd.c: 73: {
   496  00141C                     _LCD_Init:
   497                           	opt stack 30
   498                           ; BSR set to: ?
   499                           ;lcd_portd.c: 74: TRISD = 0x01;
   500  00141C  0E01               	movlw	1
   501  00141E  6E95               	movwf	3989,c	;volatile
   502                           ;lcd_portd.c: 75: RD1 = 0;
   503  001420  9283               	bcf	3971,1,c	;volatile
   504                           ;lcd_portd.c: 76: LCD_Inst(0x33);
   505  001422  0E33               	movlw	51
   506  001424  EC28  F00A         	call	_LCD_Inst
   507                           ;lcd_portd.c: 77: LCD_Inst(0x32);
   508  001428  0E32               	movlw	50
   509  00142A  EC28  F00A         	call	_LCD_Inst
   510                           ;lcd_portd.c: 78: LCD_Inst(0x28);
   511  00142E  0E28               	movlw	40
   512  001430  EC28  F00A         	call	_LCD_Inst
   513                           ;lcd_portd.c: 79: LCD_Inst(0x0E);
   514  001434  0E0E               	movlw	14
   515  001436  EC28  F00A         	call	_LCD_Inst
   516                           ;lcd_portd.c: 80: LCD_Inst(0x01);
   517  00143A  0E01               	movlw	1
   518  00143C  EC28  F00A         	call	_LCD_Inst
   519                           ;lcd_portd.c: 81: LCD_Inst(0x06);
   520  001440  0E06               	movlw	6
   521  001442  EC28  F00A         	call	_LCD_Inst
   522                           ;lcd_portd.c: 82: Wait_ms(100);
   523  001446  0E64               	movlw	100
   524  001448  6E0A               	movwf	?_Wait_ms,c
   525  00144A  6A0B               	clrf	?_Wait_ms+1,c
   526  00144C  EF40  F00A         	goto	_Wait_ms	;wreg free
   527                           ;lcd_portd.c: 83: }
   528                           ; BSR set to: ?
   529  001450                     __end_of_LCD_Init:
   530                           	opt stack 0
   531                           
   532                           	psect	text4
   533                           ; =============== function _LCD_Init ends ======
      +                          ======
   534  000000                     
   535  00134C                     ___awmod:
   536                           	opt stack 30
   537                           ; BSR set to: ?
   538  00134C  6AE9               	clrf	fsr0l,c
   539  00134E  AE09               	btfss	?___awmod+1,7,c
   540  001350  D006               	goto	l264
   541  001352  6C08               	negf	?___awmod,c
   542  001354  1E09               	comf	?___awmod+1,f,c
   543  001356  B0D8               	btfsc	status,0,c
   544  001358  2A09               	incf	?___awmod+1,f,c
   545  00135A  0E01               	movlw	1
   546  00135C  6EE9               	movwf	fsr0l,c
   547  00135E                     l264:
   548                           ; BSR set to: ?
   549  00135E  AE0B               	btfss	?___awmod+3,7,c
   550  001360  D004               	goto	l265
   551  001362  6C0A               	negf	?___awmod+2,c
   552  001364  1E0B               	comf	?___awmod+3,f,c
   553  001366  B0D8               	btfsc	status,0,c
   554  001368  2A0B               	incf	?___awmod+3,f,c
   555  00136A                     l265:
   556                           ; BSR set to: ?
   557  00136A  500B               	movf	?___awmod+3,w,c
   558  00136C  100A               	iorwf	?___awmod+2,w,c
   559  00136E  E017               	bz	l266
   560  001370  0E01               	movlw	1
   561  001372  6ED9               	movwf	fsr2l,c
   562  001374                     l267:
   563                           ; BSR set to: ?
   564  001374  BE0B               	btfsc	?___awmod+3,7,c
   565  001376  D005               	goto	l272
   566                           ; BSR set to: ?
   567  001378  90D8               	bcf	status,0,c
   568  00137A  360A               	rlcf	?___awmod+2,f,c
   569  00137C  360B               	rlcf	?___awmod+3,f,c
   570  00137E  2AD9               	incf	fsr2l,f,c
   571  001380  D7F9               	goto	l267
   572                           ; BSR set to: ?
   573  001382                     l272:
   574                           ; BSR set to: ?
   575  001382  500A               	movf	?___awmod+2,w,c
   576  001384  5C08               	subwf	?___awmod,w,c
   577  001386  500B               	movf	?___awmod+3,w,c
   578  001388  5809               	subwfb	?___awmod+1,w,c
   579  00138A  E304               	bnc	l273
   580  00138C  500A               	movf	?___awmod+2,w,c
   581  00138E  5E08               	subwf	?___awmod,f,c
   582  001390  500B               	movf	?___awmod+3,w,c
   583  001392  5A09               	subwfb	?___awmod+1,f,c
   584  001394                     l273:
   585                           ; BSR set to: ?
   586  001394  90D8               	bcf	status,0,c
   587  001396  320B               	rrcf	?___awmod+3,f,c
   588  001398  320A               	rrcf	?___awmod+2,f,c
   589  00139A  2ED9               	decfsz	fsr2l,f,c
   590  00139C  D7F2               	goto	l272
   591                           ; BSR set to: ?
   592  00139E                     l266:
   593                           ; BSR set to: ?
   594  00139E  50E9               	movf	fsr0l,w,c
   595  0013A0  E004               	bz	l274
   596  0013A2  6C08               	negf	?___awmod,c
   597  0013A4  1E09               	comf	?___awmod+1,f,c
   598  0013A6  B0D8               	btfsc	status,0,c
   599  0013A8  2A09               	incf	?___awmod+1,f,c
   600  0013AA                     l274:
   601                           ; BSR set to: ?
   602  0013AA  0012               	return	
   603                           ; BSR set to: ?
   604  0013AC                     __end_of___awmod:
   605                           	opt stack 0
   606                           
   607                           	psect	text5
   608                           ; =============== function ___awmod ends =======
      +                          =====
   609  000000                     
   610                           ;lcd_portd.c: 61: void LCD_Write(unsigned char c
      +                          )
   611                           ;lcd_portd.c: 62: {
   612  0014A8                     _LCD_Write:
   613                           	opt stack 29
   614                           ; BSR set to: ?
   615                           ; LCD_Write@c loaded to prodl
   616  0014A8  CFE8 FFF3          	movff	wreg,prodl
   617                           ;lcd_portd.c: 63: RD2 = 1;
   618  0014AC  8483               	bsf	3971,2,c	;volatile
   619                           ;lcd_portd.c: 64: PORTD = (PORTD & 0x0F) | (c & 
      +                          0xF0);
   620  0014AE  CFF3 F019          	movff	prodl,??_LCD_Write
   621  0014B2  0EF0               	movlw	240
   622  0014B4  ECF9  F009         	call	PL4
   623                           ;lcd_portd.c: 65: LCD_Strobe();
   624  0014B8  EC67  F00A         	call	_LCD_Strobe	;wreg free
   625                           ;lcd_portd.c: 66: PORTD = (PORTD & 0x0F) | ((c<<
      +                          4) & 0xF0);
   626  0014BC  CFF3 F019          	movff	prodl,??_LCD_Write
   627  0014C0  3A19               	swapf	??_LCD_Write,f,c
   628  0014C2  0EF0               	movlw	240
   629  0014C4  1619               	andwf	??_LCD_Write,f,c
   630  0014C6  ECF9  F009         	call	PL4
   631                           ;lcd_portd.c: 67: LCD_Strobe();
   632  0014CA  EF67  F00A         	goto	_LCD_Strobe	;wreg free
   633                           ;lcd_portd.c: 69: }
   634                           ; BSR set to: ?
   635  0014CE                     __end_of_LCD_Write:
   636                           	opt stack 0
   637                           
   638                           	psect	text6
   639                           ; =============== function _LCD_Write ends =====
      +                          =======
   640  000000                     
   641                           ;lcd_portd.c: 43: void LCD_Inst(unsigned char c)
   642                           ;lcd_portd.c: 44: {
   643  001450                     _LCD_Inst:
   644                           	opt stack 29
   645                           ; BSR set to: ?
   646                           ; LCD_Inst@c loaded to prodl
   647  001450  CFE8 FFF3          	movff	wreg,prodl
   648  001454  9483               	bcf	3971,2,c	;volatile
   649                           ;lcd_portd.c: 46: PORTD = (PORTD & 0x0F) | (c & 
      +                          0xF0);
   650  001456  CFF3 F009          	movff	prodl,??_LCD_Inst
   651  00145A  0EF0               	movlw	240
   652  00145C  ECF3  F009         	call	PL5
   653                           ;lcd_portd.c: 47: LCD_Strobe();
   654  001460  EC67  F00A         	call	_LCD_Strobe	;wreg free
   655                           ;lcd_portd.c: 48: PORTD = (PORTD & 0x0F) | ((c<<
      +                          4) & 0xF0);
   656  001464  CFF3 F009          	movff	prodl,??_LCD_Inst
   657  001468  3A09               	swapf	??_LCD_Inst,f,c
   658  00146A  0EF0               	movlw	240
   659  00146C  1609               	andwf	??_LCD_Inst,f,c
   660  00146E  ECF3  F009         	call	PL5
   661                           ;lcd_portd.c: 49: LCD_Strobe();
   662  001472  EC67  F00A         	call	_LCD_Strobe	;wreg free
   663                           ;lcd_portd.c: 50: Wait_ms(10);
   664  001476  0E0A               	movlw	10
   665  001478  6E0A               	movwf	?_Wait_ms,c
   666  00147A  6A0B               	clrf	?_Wait_ms+1,c
   667  00147C  EF40  F00A         	goto	_Wait_ms	;wreg free
   668                           ;lcd_portd.c: 51: }
   669                           ; BSR set to: ?
   670  001480                     __end_of_LCD_Inst:
   671                           	opt stack 0
   672                           
   673                           	psect	text7
   674                           ; =============== function _LCD_Inst ends ======
      +                          ======
   675  000000                     
   676  0011FC                     ___aldiv:
   677                           	opt stack 29
   678                           ; BSR set to: ?
   679  0011FC  6AF3               	clrf	prodl,c
   680  0011FE  AE20               	btfss	?___aldiv+7,7,c
   681  001200  D00A               	goto	l217
   682  001202  1E20               	comf	?___aldiv+7,f,c
   683  001204  1E1F               	comf	?___aldiv+6,f,c
   684  001206  1E1E               	comf	?___aldiv+5,f,c
   685  001208  6C1D               	negf	?___aldiv+4,c
   686  00120A  0E00               	movlw	0
   687  00120C  221E               	addwfc	?___aldiv+5,f,c
   688  00120E  221F               	addwfc	?___aldiv+6,f,c
   689  001210  2220               	addwfc	?___aldiv+7,f,c
   690  001212  0E01               	movlw	1
   691  001214  6EF3               	movwf	prodl,c
   692  001216                     l217:
   693                           ; BSR set to: ?
   694  001216  AE1C               	btfss	?___aldiv+3,7,c
   695  001218  D00A               	goto	l218
   696  00121A  1E1C               	comf	?___aldiv+3,f,c
   697  00121C  1E1B               	comf	?___aldiv+2,f,c
   698  00121E  1E1A               	comf	?___aldiv+1,f,c
   699  001220  6C19               	negf	?___aldiv,c
   700  001222  0E00               	movlw	0
   701  001224  221A               	addwfc	?___aldiv+1,f,c
   702  001226  221B               	addwfc	?___aldiv+2,f,c
   703  001228  221C               	addwfc	?___aldiv+3,f,c
   704  00122A  0E01               	movlw	1
   705  00122C  1AF3               	xorwf	prodl,f,c
   706  00122E                     l218:
   707                           ; BSR set to: ?
   708  00122E  6A21               	clrf	??___aldiv,c
   709  001230  6A22               	clrf	??___aldiv+1,c
   710  001232  6A23               	clrf	??___aldiv+2,c
   711  001234  6A24               	clrf	??___aldiv+3,c
   712  001236  5020               	movf	?___aldiv+7,w,c
   713  001238  101D               	iorwf	?___aldiv+4,w,c
   714  00123A  101E               	iorwf	?___aldiv+5,w,c
   715  00123C  101F               	iorwf	?___aldiv+6,w,c
   716  00123E  E029               	bz	l219
   717  001240  0E01               	movlw	1
   718  001242  6EE9               	movwf	fsr0l,c
   719  001244                     l220:
   720                           ; BSR set to: ?
   721  001244  90D8               	bcf	status,0,c
   722                           ; BSR set to: ?
   723  001246  BE20               	btfsc	?___aldiv+7,7,c
   724  001248  D007               	goto	L2
   725  00124A  361D               	rlcf	?___aldiv+4,f,c
   726  00124C  361E               	rlcf	?___aldiv+5,f,c
   727  00124E  361F               	rlcf	?___aldiv+6,f,c
   728  001250  3620               	rlcf	?___aldiv+7,f,c
   729  001252  2AE9               	incf	fsr0l,f,c
   730  001254  D7F7               	goto	l220
   731                           ; BSR set to: ?
   732  001256                     l225:
   733                           ; BSR set to: ?
   734  001256  90D8               	bcf	status,0,c
   735  001258                     L2:
   736  001258  3621               	rlcf	??___aldiv,f,c
   737  00125A  3622               	rlcf	??___aldiv+1,f,c
   738  00125C  3623               	rlcf	??___aldiv+2,f,c
   739  00125E  3624               	rlcf	??___aldiv+3,f,c
   740  001260  501D               	movf	?___aldiv+4,w,c
   741  001262  5C19               	subwf	?___aldiv,w,c
   742  001264  501E               	movf	?___aldiv+5,w,c
   743  001266  581A               	subwfb	?___aldiv+1,w,c
   744  001268  501F               	movf	?___aldiv+6,w,c
   745  00126A  581B               	subwfb	?___aldiv+2,w,c
   746  00126C  5020               	movf	?___aldiv+7,w,c
   747  00126E  581C               	subwfb	?___aldiv+3,w,c
   748  001270  E309               	bnc	l226
   749  001272  501D               	movf	?___aldiv+4,w,c
   750  001274  5E19               	subwf	?___aldiv,f,c
   751  001276  501E               	movf	?___aldiv+5,w,c
   752  001278  5A1A               	subwfb	?___aldiv+1,f,c
   753  00127A  501F               	movf	?___aldiv+6,w,c
   754  00127C  5A1B               	subwfb	?___aldiv+2,f,c
   755  00127E  5020               	movf	?___aldiv+7,w,c
   756  001280  5A1C               	subwfb	?___aldiv+3,f,c
   757  001282  8021               	bsf	??___aldiv,0,c
   758  001284                     l226:
   759                           ; BSR set to: ?
   760  001284  90D8               	bcf	status,0,c
   761  001286  3220               	rrcf	?___aldiv+7,f,c
   762  001288  321F               	rrcf	?___aldiv+6,f,c
   763  00128A  321E               	rrcf	?___aldiv+5,f,c
   764  00128C  321D               	rrcf	?___aldiv+4,f,c
   765  00128E  2EE9               	decfsz	fsr0l,f,c
   766  001290  D7E2               	goto	l225
   767                           ; BSR set to: ?
   768  001292                     l219:
   769                           ; BSR set to: ?
   770  001292  50F3               	movf	prodl,w,c
   771  001294  E008               	bz	l227
   772  001296  1E24               	comf	??___aldiv+3,f,c
   773  001298  1E23               	comf	??___aldiv+2,f,c
   774  00129A  1E22               	comf	??___aldiv+1,f,c
   775  00129C  6C21               	negf	??___aldiv,c
   776  00129E  0E00               	movlw	0
   777  0012A0  2222               	addwfc	??___aldiv+1,f,c
   778  0012A2  2223               	addwfc	??___aldiv+2,f,c
   779  0012A4  2224               	addwfc	??___aldiv+3,f,c
   780  0012A6                     l227:
   781                           ; BSR set to: ?
   782  0012A6  C021  F019         	movff	??___aldiv,?___aldiv
   783  0012AA  C022  F01A         	movff	??___aldiv+1,?___aldiv+1
   784  0012AE  C023  F01B         	movff	??___aldiv+2,?___aldiv+2
   785  0012B2  C024  F01C         	movff	??___aldiv+3,?___aldiv+3
   786  0012B6  0012               	return	
   787                           ; BSR set to: ?
   788  0012B8                     __end_of___aldiv:
   789                           	opt stack 0
   790                           
   791                           	psect	text8
   792                           ; =============== function ___aldiv ends =======
      +                          =====
   793  000000                     
   794  0012B8                     ___almod:
   795                           	opt stack 29
   796                           ; BSR set to: ?
   797  0012B8  6AF3               	clrf	prodl,c
   798  0012BA  AE1C               	btfss	?___almod+3,7,c
   799  0012BC  D00A               	goto	l229
   800  0012BE  1E1C               	comf	?___almod+3,f,c
   801  0012C0  1E1B               	comf	?___almod+2,f,c
   802  0012C2  1E1A               	comf	?___almod+1,f,c
   803  0012C4  6C19               	negf	?___almod,c
   804  0012C6  0E00               	movlw	0
   805  0012C8  221A               	addwfc	?___almod+1,f,c
   806  0012CA  221B               	addwfc	?___almod+2,f,c
   807  0012CC  221C               	addwfc	?___almod+3,f,c
   808  0012CE  0E01               	movlw	1
   809  0012D0  6EF3               	movwf	prodl,c
   810  0012D2                     l229:
   811                           ; BSR set to: ?
   812  0012D2  AE20               	btfss	?___almod+7,7,c
   813  0012D4  D008               	goto	l230
   814  0012D6  1E20               	comf	?___almod+7,f,c
   815  0012D8  1E1F               	comf	?___almod+6,f,c
   816  0012DA  1E1E               	comf	?___almod+5,f,c
   817  0012DC  6C1D               	negf	?___almod+4,c
   818  0012DE  0E00               	movlw	0
   819  0012E0  221E               	addwfc	?___almod+5,f,c
   820  0012E2  221F               	addwfc	?___almod+6,f,c
   821  0012E4  2220               	addwfc	?___almod+7,f,c
   822  0012E6                     l230:
   823                           ; BSR set to: ?
   824  0012E6  5020               	movf	?___almod+7,w,c
   825  0012E8  101D               	iorwf	?___almod+4,w,c
   826  0012EA  101E               	iorwf	?___almod+5,w,c
   827  0012EC  101F               	iorwf	?___almod+6,w,c
   828  0012EE  E023               	bz	l231
   829  0012F0  0E01               	movlw	1
   830  0012F2  6EE9               	movwf	fsr0l,c
   831  0012F4                     l232:
   832                           ; BSR set to: ?
   833  0012F4  BE20               	btfsc	?___almod+7,7,c
   834  0012F6  D007               	goto	l237
   835                           ; BSR set to: ?
   836  0012F8  90D8               	bcf	status,0,c
   837  0012FA  361D               	rlcf	?___almod+4,f,c
   838  0012FC  361E               	rlcf	?___almod+5,f,c
   839  0012FE  361F               	rlcf	?___almod+6,f,c
   840  001300  3620               	rlcf	?___almod+7,f,c
   841  001302  2AE9               	incf	fsr0l,f,c
   842  001304  D7F7               	goto	l232
   843                           ; BSR set to: ?
   844  001306                     l237:
   845                           ; BSR set to: ?
   846  001306  501D               	movf	?___almod+4,w,c
   847  001308  5C19               	subwf	?___almod,w,c
   848  00130A  501E               	movf	?___almod+5,w,c
   849  00130C  581A               	subwfb	?___almod+1,w,c
   850  00130E  501F               	movf	?___almod+6,w,c
   851  001310  581B               	subwfb	?___almod+2,w,c
   852  001312  5020               	movf	?___almod+7,w,c
   853  001314  581C               	subwfb	?___almod+3,w,c
   854  001316  E308               	bnc	l238
   855  001318  501D               	movf	?___almod+4,w,c
   856  00131A  5E19               	subwf	?___almod,f,c
   857  00131C  501E               	movf	?___almod+5,w,c
   858  00131E  5A1A               	subwfb	?___almod+1,f,c
   859  001320  501F               	movf	?___almod+6,w,c
   860  001322  5A1B               	subwfb	?___almod+2,f,c
   861  001324  5020               	movf	?___almod+7,w,c
   862  001326  5A1C               	subwfb	?___almod+3,f,c
   863  001328                     l238:
   864                           ; BSR set to: ?
   865  001328  90D8               	bcf	status,0,c
   866  00132A  3220               	rrcf	?___almod+7,f,c
   867  00132C  321F               	rrcf	?___almod+6,f,c
   868  00132E  321E               	rrcf	?___almod+5,f,c
   869  001330  321D               	rrcf	?___almod+4,f,c
   870  001332  2EE9               	decfsz	fsr0l,f,c
   871  001334  D7E8               	goto	l237
   872                           ; BSR set to: ?
   873  001336                     l231:
   874                           ; BSR set to: ?
   875  001336  50F3               	movf	prodl,w,c
   876  001338  E008               	bz	l239
   877  00133A  1E1C               	comf	?___almod+3,f,c
   878  00133C  1E1B               	comf	?___almod+2,f,c
   879  00133E  1E1A               	comf	?___almod+1,f,c
   880  001340  6C19               	negf	?___almod,c
   881  001342  0E00               	movlw	0
   882  001344  221A               	addwfc	?___almod+1,f,c
   883  001346  221B               	addwfc	?___almod+2,f,c
   884  001348  221C               	addwfc	?___almod+3,f,c
   885  00134A                     l239:
   886                           ; BSR set to: ?
   887  00134A  0012               	return	
   888                           ; BSR set to: ?
   889  00134C                     __end_of___almod:
   890                           	opt stack 0
   891                           
   892                           	psect	text9
   893                           ; =============== function ___almod ends =======
      +                          =====
   894  000000                     
   895                           ;lcd_portd.c: 31: void LCD_Strobe(void)
   896                           ;lcd_portd.c: 32: {
   897  0014CE                     _LCD_Strobe:
   898                           	opt stack 28
   899                           ; BSR set to: ?
   900                           ;lcd_portd.c: 33: RD3 = 0;
   901  0014CE  9683               	bcf	3971,3,c	;volatile
   902                           ;lcd_portd.c: 34: LCD_Pause();
   903  0014D0  EC70  F00A         	call	_LCD_Pause	;wreg free
   904                           ;lcd_portd.c: 35: RD3 = 1;
   905  0014D4  8683               	bsf	3971,3,c	;volatile
   906                           ;lcd_portd.c: 36: LCD_Pause();
   907  0014D6  EC70  F00A         	call	_LCD_Pause	;wreg free
   908                           ;lcd_portd.c: 37: RD3 = 0;
   909  0014DA  9683               	bcf	3971,3,c	;volatile
   910                           ;lcd_portd.c: 38: LCD_Pause();
   911  0014DC  EF70  F00A         	goto	_LCD_Pause	;wreg free
   912                           ;lcd_portd.c: 39: }
   913                           ; BSR set to: ?
   914  0014E0                     __end_of_LCD_Strobe:
   915                           	opt stack 0
   916                           
   917                           	psect	text10
   918                           ; =============== function _LCD_Strobe ends ====
      +                          ========
   919  000000                     
   920                           ;lcd_portd.c: 15: void Wait_ms(unsigned int X)
   921                           ;lcd_portd.c: 16: {
   922  001480                     _Wait_ms:
   923                           	opt stack 28
   924                           ; BSR set to: ?
   925                           ;lcd_portd.c: 17: unsigned int i, j;
   926                           ;lcd_portd.c: 19: for (i=0; i<X; i++)
   927  001480  6AF3               	clrf	prodl,c
   928  001482  6AF4               	clrf	prodh,c
   929  001484                     l113:
   930                           ; BSR set to: ?
   931  001484  500A               	movf	?_Wait_ms,w,c
   932  001486  5CF3               	subwf	prodl,w,c
   933  001488  500B               	movf	?_Wait_ms+1,w,c
   934  00148A  58F4               	subwfb	prodh,w,c
   935  00148C  B0D8               	btfsc	status,0,c
   936  00148E  0012               	return	
   937                           ; BSR set to: ?
   938                           ;lcd_portd.c: 20: for (j=0; j<617; j++);
   939  001490  6A0C               	clrf	??_Wait_ms,c
   940  001492  6A0D               	clrf	??_Wait_ms+1,c
   941  001494                     l114:
   942                           ; BSR set to: ?
   943  001494  4A0C               	infsnz	??_Wait_ms,f,c
   944  001496  2A0D               	incf	??_Wait_ms+1,f,c
   945  001498  0E69               	movlw	105
   946  00149A  5C0C               	subwf	??_Wait_ms,w,c
   947  00149C  0E02               	movlw	2
   948  00149E  580D               	subwfb	??_Wait_ms+1,w,c
   949  0014A0  E3F9               	bnc	l114
   950                           ; BSR set to: ?
   951  0014A2  4AF3               	infsnz	prodl,f,c
   952  0014A4  2AF4               	incf	prodh,f,c
   953  0014A6  D7EE               	goto	l113
   954                           ; BSR set to: ?
   955                           ;lcd_portd.c: 21: }
   956                           ; BSR set to: ?
   957  0014A8                     __end_of_Wait_ms:
   958                           	opt stack 0
   959                           
   960                           	psect	text11
   961                           ; =============== function _Wait_ms ends =======
      +                          =====
   962  000000                     
   963                           ;lcd_portd.c: 24: void LCD_Pause(void)
   964                           ;lcd_portd.c: 25: {
   965  0014E0                     _LCD_Pause:
   966                           	opt stack 27
   967                           ; BSR set to: ?
   968  0014E0  6AE9               	clrf	fsr0l,c
   969  0014E2                     l118:
   970                           ; BSR set to: ?
   971  0014E2  2AE9               	incf	fsr0l,f,c
   972  0014E4  0E13               	movlw	19
   973  0014E6  64E9               	cpfsgt	fsr0l,c
   974  0014E8  D7FC               	goto	l118
   975  0014EA  0C13               	retlw	19
   976                           ; BSR set to: ?
   977                           ;lcd_portd.c: 28: }
   978                           ; BSR set to: ?
   979  0014EC                     __end_of_LCD_Pause:
   980                           	opt stack 0
   981                           
   982                           	psect	smallconst
   983                           ; =============== function _LCD_Pause ends =====
      +                          =======
   984  001000  00                 	db	0	;reserve
   985  001001                     _MSG0:
   986                           	opt stack 0
   987  001001  4C                 	db	76
   988  001002  6F                 	db	111
   989  001003  61                 	db	97
   990  001004  64                 	db	100
   991  001005  65                 	db	101
   992  001006  64                 	db	100
   993  001007  20                 	db	32
   994  001008  44                 	db	68
   995  001009  69                 	db	105
   996  00100A  65                 	db	101
   997  00100B  2E                 	db	46
   998  00100C  43                 	db	67
   999  00100D  20                 	db	32
  1000  00100E  20                 	db	32
  1001  00100F  20                 	db	32
  1002  001010  20                 	db	32
  1003  001011  20                 	db	32
  1004  001012  00                 	db	0
  1005  001013  00                 	db	0
  1006  001014  00                 	db	0
  1007  001015  00                 	db	0
  1008  001016                     _MSG1:
  1009                           	opt stack 0
  1010  001016  52                 	db	82
  1011  001017  42                 	db	66
  1012  001018  30                 	db	48
  1013  001019  20                 	db	32
  1014  00101A  74                 	db	116
  1015  00101B  6F                 	db	111
  1016  00101C  20                 	db	32
  1017  00101D  72                 	db	114
  1018  00101E  6F                 	db	111
  1019  00101F  6C                 	db	108
  1020  001020  6C                 	db	108
  1021  001021  20                 	db	32
  1022  001022  20                 	db	32
  1023  001023  20                 	db	32
  1024  001024  20                 	db	32
  1025  001025  20                 	db	32
  1026  001026  20                 	db	32
  1027  001027  00                 	db	0
  1028  001028  00                 	db	0
  1029  001029  00                 	db	0
  1030  00102A  00                 	db	0
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  00102B  00                 	db	0	; dummy byte at the end
  1053                           
  1054                           	psect	rparam
  1055  000000                     
  1056  000000                     
  1057                           
  1058                           	psect	pa_nodes
  1059  0013E6                     PL5:
  1060  0013E6  1609               	andwf	??_LCD_Inst,f,c
  1061  0013E8  5083               	movf	3971,w,c	;volatile
  1062  0013EA  0B0F               	andlw	15
  1063  0013EC  1009               	iorwf	??_LCD_Inst,w,c
  1064  0013EE  6E83               	movwf	3971,c	;volatile
  1065  0013F0  0012               	return	
  1066  0013F2                     PL4:
  1067  0013F2  1619               	andwf	??_LCD_Write,f,c
  1068  0013F4  5083               	movf	3971,w,c	;volatile
  1069  0013F6  0B0F               	andlw	15
  1070  0013F8  1019               	iorwf	??_LCD_Write,w,c
  1071  0013FA  6E83               	movwf	3971,c	;volatile
  1072  0013FC  0012               	return	
  1073  0013FE                     PL3:
  1074  0013FE  0E14               	movlw	20
  1075  001400  5C04               	subwf	??_main+4,w,c
  1076  001402  0E00               	movlw	0
  1077  001404  5805               	subwfb	??_main+5,w,c
  1078  001406  0012               	return	
  1079  001408                     PL2:
  1080  001408  6E06               	movwf	(??_main+6)& (0+255),c
  1081  00140A  C006  FFF6         	movff	??_main+6,tblptrl
  1082  00140E  0E10               	movlw	high __Lsmallconst
  1083  001410  6EF7               	movwf	tblptrh,c
  1084  001412  0E00               	movlw	low (__Lsmallconst shr (0+16))
  1085  001414  6EF8               	movwf	tblptru,c
  1086  001416  0008               	tblrd		*
  1087  001418  50F5               	movf	tablat,w,c
  1088  00141A  0012               	return	
  1089                           tblptru	equ	0xFF8
  1090                           tblptrh	equ	0xFF7
  1091                           tblptrl	equ	0xFF6
  1092                           tablat	equ	0xFF5
  1093                           prodh	equ	0xFF4
  1094                           prodl	equ	0xFF3
  1095                           indf0	equ	0xFEF
  1096                           fsr0h	equ	0xFEA
  1097                           fsr0l	equ	0xFE9
  1098                           wreg	equ	0xFE8
  1099                           fsr2l	equ	0xFD9
  1100                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.63PL3 build 4692 
Symbol Table                                           Tue Mar 03 15:58:53 2020

        ?_LCD_Strobe 001A                  l113 1484  
                l114 1494                  l131 1152  
                l220 1244                  l132 1158  
                l124 13BC                  l133 115A  
                l125 13C8                  l118 14E2  
                l230 12E6                  l126 13D6  
                l231 1336                  l232 12F4  
                l136 11CC                  l225 1256  
                l217 1216                  l226 1284  
                l218 122E                  l170 106E  
                l227 12A6                  l219 1292  
                l139 11D8                  l180 10AE  
                l237 1306                  l229 12D2  
                l238 1328                  l239 134A  
                l183 111A                  l167 104C  
                l272 1382                  l264 135E  
                l176 10A8                  l273 1394  
                l265 136A                  l274 13AA  
                l266 139E                  l186 1124  
                l267 1374                  l179 10DC  
                l189 112C                  _RB0 007C08  
                _RD1 007C19                  _RD2 007C1A  
                _RD3 007C1B                  wreg 000FE8  
    __end_of_LCD_Out 11FC                 _BRGH 007D62  
               _MSG0 1001                 _RCIE 007CED  
               _MSG1 1016                 _TRMT 007D61  
               _TXIE 007CEC                 _SYNC 007D64  
               _main 102C                 indf0 000FEF  
               fsr0l 000FE9                 fsr2l 000FD9  
               prodh 000FF4                 prodl 000FF3  
               start 0000          LCD_Out@DATA 0008  
        LCD_Move@Col 0008     __end_of_LCD_Init 1450  
   __end_of_LCD_Inst 1480     __end_of_LCD_Move 13E6  
    __end_of_Wait_ms 14A8      __end_of___aldiv 12B8  
    __end_of___almod 134C                ?_main 0000  
              _BRG16 007DC3      __end_of___awmod 13AC  
              _RCSTA 000FAB                _SPBRG 000FAF  
              _PORTD 000F83                _TRISA 000F92  
              _TRISB 000F93                _TRISC 000F94  
              _TRISD 000F95                _TRISE 000F96  
              _TXREG 000FAD                _TXSTA 000FAC  
              main@i 0004                tablat 000FF5  
              status 000FD8         __end_of_main 1136  
             ??_main 0000        __activetblptr 000003  
  __end_of_LCD_Pause 14EC            ??_LCD_Out 000E  
  __end_of_LCD_Write 14CE               _ADCON1 000FC1  
             __Ldata 000000            ??_Wait_ms 000C  
          ??___aldiv 0021            ??___almod 0021  
          ??___awmod 000C      ___awmod@divisor 000A  
             main@d8 0002         __mediumconst 102C  
             tblptrh 000FF7               tblptrl 000FF6  
             tblptru 000FF8           __accesstop 0080  
          ?_LCD_Init 0008            ?_LCD_Inst 0009  
          ?_LCD_Move 0008         ??_LCD_Strobe 001A  
         ??_LCD_Init 0008           ??_LCD_Inst 0009  
         ??_LCD_Move 0009   __end_of_LCD_Strobe 14E0  
            _LCD_Out 1136              __Hparam 0025  
            __Lparam 0000              _Wait_ms 1480  
            ___aldiv 11FC              ___almod 12B8  
            ___awmod 134C              __ramtop 1000  
   ___awmod@dividend 0008     ___aldiv@dividend 0019  
          _LCD_Pause 14E0            _LCD_Write 14A8  
      __Lmediumconst 102C     ___aldiv@quotient 0021  
         ?_LCD_Pause 001A           ?_LCD_Write 0019  
           ?_LCD_Out 0008             LCD_Out@A 000E  
           LCD_Out@D 000C             LCD_Out@N 000D  
        ??_LCD_Pause 001A          ??_LCD_Write 0019  
           ?_Wait_ms 000A             ?___aldiv 0019  
           ?___almod 0019             ?___awmod 0008  
   ___almod@dividend 0019          __smallconst 1000  
    ___aldiv@divisor 001D             _LCD_Init 141C  
           _LCD_Inst 1450             _LCD_Move 13AC  
           __Hrparam 0025             Wait_ms@X 000A  
           Wait_ms@j 000C             __Lrparam 0000  
       __Lsmallconst 1000      ___almod@divisor 001D  
           main@d101 0000           _LCD_Strobe 14CE  
